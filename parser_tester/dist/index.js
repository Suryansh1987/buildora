"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = require("./parser");
const parser2_1 = require("./parser2");
const stParser_1 = require("./stParser");
const res = (0, parser_1.parseApiData)("{\n  \"files\": [\n    {\n      \"path\": \"src/index.ts\",\n      \"content\": \"import express, { Request, Response } from 'express';\\nimport cors from 'cors';\\nimport dotenv from 'dotenv';\\nimport { PrismaClient } from '@prisma/client';\\nimport { postsController } from './controllers/postsController';\\nimport { categoriesController } from './controllers/categoriesController';\\n\\ndotenv.config();\\n\\nconst app = express();\\nconst prisma = new PrismaClient();\\nconst PORT = process.env.PORT || 3000;\\n\\n// Middleware\\napp.use(cors());\\napp.use(express.json());\\n\\n// API Routes\\napp.use('/api/posts', postsController);\\napp.use('/api/categories', categoriesController);\\n\\n// Health check endpoint\\napp.get('/health', (req: Request, res: Response) => {\\n  res.json({ status: 'ok' });\\n});\\n\\n// Error handling middleware\\napp.use((err: Error, req: Request, res: Response, next: any) => {\\n  console.error(err.stack);\\n  res.status(500).json({\\n    success: false,\\n    error: 'Something went wrong!'\\n  });\\n});\\n\\n// Start server\\napp.listen(PORT, () => {\\n  console.log(`Server running on port ${PORT}`);\\n});\\n\\nexport { prisma };\"\n    },\n    {\n      \"path\": \"src/controllers/postsController.ts\",\n      \"content\": \"import { Router, Request, Response } from 'express';\\nimport { prisma } from '../index';\\nimport { Post } from '../types';\\n\\nconst router = Router();\\n\\n// Get all posts\\nrouter.get('/', async (req: Request, res: Response) => {\\n  try {\\n    const page = parseInt(req.query.page as string) || 1;\\n    const limit = parseInt(req.query.limit as string) || 10;\\n    const skip = (page - 1) * limit;\\n    \\n    const posts = await prisma.post.findMany({\\n      skip,\\n      take: limit,\\n      include: {\\n        category: true,\\n        author: true\\n      },\\n      orderBy: {\\n        createdAt: 'desc'\\n      }\\n    });\\n    \\n    const total = await prisma.post.count();\\n    \\n    res.json({\\n      success: true,\\n      data: posts,\\n      total,\\n      page,\\n      totalPages: Math.ceil(total / limit)\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch posts'\\n    });\\n  }\\n});\\n\\n// Get single post by ID\\nrouter.get('/:id', async (req: Request, res: Response) => {\\n  try {\\n    const { id } = req.params;\\n    \\n    const post = await prisma.post.findUnique({\\n      where: { id },\\n      include: {\\n        category: true,\\n        author: true\\n      }\\n    });\\n    \\n    if (!post) {\\n      return res.status(404).json({\\n        success: false,\\n        error: 'Post not found'\\n      });\\n    }\\n    \\n    res.json({\\n      success: true,\\n      data: post\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch post'\\n    });\\n  }\\n});\\n\\n// Get featured posts\\nrouter.get('/featured/list', async (req: Request, res: Response) => {\\n  try {\\n    const featuredPosts = await prisma.post.findMany({\\n      where: {\\n        featured: true\\n      },\\n      take: 5,\\n      include: {\\n        category: true,\\n        author: true\\n      },\\n      orderBy: {\\n        createdAt: 'desc'\\n      }\\n    });\\n    \\n    res.json({\\n      success: true,\\n      data: featuredPosts\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch featured posts'\\n    });\\n  }\\n});\\n\\n// Get posts by category\\nrouter.get('/category/:categoryId', async (req: Request, res: Response) => {\\n  try {\\n    const { categoryId } = req.params;\\n    const page = parseInt(req.query.page as string) || 1;\\n    const limit = parseInt(req.query.limit as string) || 10;\\n    const skip = (page - 1) * limit;\\n    \\n    const posts = await prisma.post.findMany({\\n      where: {\\n        categoryId\\n      },\\n      skip,\\n      take: limit,\\n      include: {\\n        category: true,\\n        author: true\\n      },\\n      orderBy: {\\n        createdAt: 'desc'\\n      }\\n    });\\n    \\n    const total = await prisma.post.count({\\n      where: { categoryId }\\n    });\\n    \\n    res.json({\\n      success: true,\\n      data: posts,\\n      total,\\n      page,\\n      totalPages: Math.ceil(total / limit)\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch posts by category'\\n    });\\n  }\\n});\\n\\nexport { router as postsController };\"\n    },\n    {\n      \"path\": \"src/controllers/categoriesController.ts\",\n      \"content\": \"import { Router, Request, Response } from 'express';\\nimport { prisma } from '../index';\\n\\nconst router = Router();\\n\\n// Get all categories\\nrouter.get('/', async (req: Request, res: Response) => {\\n  try {\\n    const categories = await prisma.category.findMany({\\n      orderBy: {\\n        name: 'asc'\\n      }\\n    });\\n    \\n    res.json({\\n      success: true,\\n      data: categories\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch categories'\\n    });\\n  }\\n});\\n\\n// Get single category by ID\\nrouter.get('/:id', async (req: Request, res: Response) => {\\n  try {\\n    const { id } = req.params;\\n    \\n    const category = await prisma.category.findUnique({\\n      where: { id },\\n      include: {\\n        posts: {\\n          take: 5,\\n          orderBy: {\\n            createdAt: 'desc'\\n          },\\n          include: {\\n            author: true\\n          }\\n        }\\n      }\\n    });\\n    \\n    if (!category) {\\n      return res.status(404).json({\\n        success: false,\\n        error: 'Category not found'\\n      });\\n    }\\n    \\n    res.json({\\n      success: true,\\n      data: category\\n    });\\n  } catch (error) {\\n    res.status(500).json({\\n      success: false,\\n      error: 'Failed to fetch category'\\n    });\\n  }\\n});\\n\\nexport { router as categoriesController };\"\n    },\n    {\n      \"path\": \"src/types/index.ts\",\n      \"content\": \"export interface Post {\\n  id: string;\\n  title: string;\\n  slug: string;\\n  content: string;\\n  excerpt: string;\\n  coverImage: string;\\n  featured: boolean;\\n  createdAt: Date;\\n  updatedAt: Date;\\n  categoryId: string;\\n  authorId: string;\\n  category?: Category;\\n  author?: Author;\\n}\\n\\nexport interface Category {\\n  id: string;\\n  name: string;\\n  slug: string;\\n  description?: string;\\n  posts?: Post[];\\n}\\n\\nexport interface Author {\\n  id: string;\\n  name: string;\\n  bio?: string;\\n  avatar?: string;\\n  posts?: Post[];\\n}\"\n    },\n    {\n      \"path\": \"prisma/schema.prisma\",\n      \"content\": \"// This is your Prisma schema file,\\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\\n\\ngenerator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel Post {\\n  id         String   @id @default(uuid())\\n  title      String\\n  slug       String   @unique\\n  content    String\\n  excerpt    String\\n  coverImage String\\n  featured   Boolean  @default(false)\\n  createdAt  DateTime @default(now())\\n  updatedAt  DateTime @updatedAt\\n  category   Category @relation(fields: [categoryId], references: [id])\\n  categoryId String\\n  author     Author   @relation(fields: [authorId], references: [id])\\n  authorId   String\\n\\n  @@index([categoryId])\\n  @@index([authorId])\\n}\\n\\nmodel Category {\\n  id          String  @id @default(uuid())\\n  name        String\\n  slug        String  @unique\\n  description String?\\n  posts       Post[]\\n}\\n\\nmodel Author {\\n  id    String  @id @default(uuid())\\n  name  String\\n  bio   String?\\n  avatar String?\\n  posts Post[]\\n}\\n\\n// Seed data comment section (execute these after prisma db push)\\n\\n/*\\n-- Categories\\nINSERT INTO \\\"Category\\\" (id, name, slug, description) VALUES\\n('c001', 'Technology', 'technology', 'Latest tech news and updates'),\\n('c002', 'Travel', 'travel', 'Explore destinations around the world'),\\n('c003', 'Food', 'food', 'Recipes and culinary adventures'),\\n('c004', 'Health', 'health', 'Wellness tips and medical insights'),\\n('c005', 'Business', 'business', 'Business strategies and market trends');\\n\\n-- Authors\\nINSERT INTO \\\"Author\\\" (id, name, bio, avatar) VALUES\\n('a001', 'Jane Smith', 'Tech journalist with 10+ years of experience', 'https://randomuser.me/api/portraits/women/12.jpg'),\\n('a002', 'John Doe', 'Travel enthusiast and professional photographer', 'https://randomuser.me/api/portraits/men/23.jpg'),\\n('a003', 'Lisa Johnson', 'Food blogger and certified nutritionist', 'https://randomuser.me/api/portraits/women/33.jpg'),\\n('a004', 'Mark Wilson', 'Health specialist and fitness coach', 'https://randomuser.me/api/portraits/men/41.jpg'),\\n('a005', 'Sarah Brown', 'Business analyst and startup consultant', 'https://randomuser.me/api/portraits/women/65.jpg');\\n\\n-- Posts\\nINSERT INTO \\\"Post\\\" (id, title, slug, content, excerpt, \\\"coverImage\\\", featured, \\\"createdAt\\\", \\\"updatedAt\\\", \\\"categoryId\\\", \\\"authorId\\\") VALUES\\n('p001', 'The Future of Artificial Intelligence', 'future-of-ai', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Exploring how AI will transform industries over the next decade', 'https://images.unsplash.com/photo-1573164713988-8665fc963095', true, '2023-06-15T08:30:00.000Z', '2023-06-15T08:30:00.000Z', 'c001', 'a001'),\\n\\n('p002', 'Hidden Gems of Southeast Asia', 'hidden-gems-southeast-asia', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Discover lesser-known destinations that will take your breath away', 'https://images.unsplash.com/photo-1528181304800-259b08848526', false, '2023-06-20T10:15:00.000Z', '2023-06-20T10:15:00.000Z', 'c002', 'a002'),\\n\\n('p003', 'Perfect Pasta Recipes for Beginners', 'pasta-recipes-beginners', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Simple and delicious pasta dishes anyone can make', 'https://images.unsplash.com/photo-1551183053-bf91a1d81141', true, '2023-06-25T14:45:00.000Z', '2023-06-25T14:45:00.000Z', 'c003', 'a003'),\\n\\n('p004', 'Morning Routines for Better Health', 'morning-routines-better-health', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Start your day right with these science-backed health routines', 'https://images.unsplash.com/photo-1541534741688-6078c6bfb5c5', false, '2023-07-01T07:00:00.000Z', '2023-07-01T07:00:00.000Z', 'c004', 'a004'),\\n\\n('p005', 'Startup Funding Strategies for 2023', 'startup-funding-strategies-2023', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Expert advice on securing funding in today\\\\'s competitive landscape', 'https://images.unsplash.com/photo-1559526324-4b87b5e36e44', true, '2023-07-05T11:30:00.000Z', '2023-07-05T11:30:00.000Z', 'c005', 'a005'),\\n\\n('p006', '5G Technology: What You Need to Know', '5g-technology-explained', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Understanding the next generation of wireless technology', 'https://images.unsplash.com/photo-1519389950473-47ba0277781c', false, '2023-07-10T09:15:00.000Z', '2023-07-10T09:15:00.000Z', 'c001', 'a001'),\\n\\n('p007', 'Budget Travel Tips for Europe', 'budget-travel-europe', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'See the best of Europe without breaking the bank', 'https://images.unsplash.com/photo-1503917988258-f87a78e3c995', true, '2023-07-15T12:45:00.000Z', '2023-07-15T12:45:00.000Z', 'c002', 'a002'),\\n\\n('p008', 'Seasonal Vegetables Guide', 'seasonal-vegetables-guide', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Choosing the best vegetables for each season', 'https://images.unsplash.com/photo-1566385101042-1a0aa0c1268c', false, '2023-07-20T15:30:00.000Z', '2023-07-20T15:30:00.000Z', 'c003', 'a003'),\\n\\n('p009', 'Mental Health in the Digital Age', 'mental-health-digital-age', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Staying mentally healthy in an always-connected world', 'https://images.unsplash.com/photo-1536148935331-408321065b18', false, '2023-07-25T08:45:00.000Z', '2023-07-25T08:45:00.000Z', 'c004', 'a004'),\\n\\n('p010', 'Remote Work Policies That Actually Work', 'remote-work-policies', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', 'Building effective remote work culture for distributed teams', 'https://images.unsplash.com/photo-1521898284481-a5ec348cb555', true, '2023-07-30T13:00:00.000Z', '2023-07-30T13:00:00.000Z', 'c005', 'a005');\\n*/\\n\"\n    },\n    {\n      \"path\": \"package.json\",\n      \"content\": \"{\\n  \\\"name\\\": \\\"blog-api\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"A simple blog API\\\",\\n  \\\"main\\\": \\\"src/index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"ts-node-dev --respawn --transpile-only src/index.ts\\\",\\n    \\\"build\\\": \\\"tsc\\\",\\n    \\\"start\\\": \\\"node dist/index.js\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@prisma/client\\\": \\\"^5.0.0\\\",\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\n    \\\"dotenv\\\": \\\"^16.0.3\\\",\\n    \\\"express\\\": \\\"^4.18.2\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/cors\\\": \\\"^2.8.13\\\",\\n    \\\"@types/express\\\": \\\"^4.17.17\\\",\\n    \\\"@types/node\\\": \\\"^18.15.11\\\",\\n    \\\"prisma\\\": \\\"^5.0.0\\\",\\n    \\\"ts-node-dev\\\": \\\"^2.0.0\\\",\\n    \\\"typescript\\\": \\\"^5.0.4\\\"\\n  }\\n}\"\n    },\n    {\n      \"path\": \".env.example\",\n      \"content\": \"PORT=3000\\nDATABASE_URL=\\\"postgresql://username:password@localhost:5432/blog_database\\\"\"\n    }\n  ],\n  \"apiEndpoints\": [\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/posts\",\n      \"description\": \"Get all blog posts with pagination\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/posts/:id\",\n      \"description\": \"Get a single blog post by ID\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/posts/featured/list\",\n      \"description\": \"Get featured blog posts\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/posts/category/:categoryId\",\n      \"description\": \"Get posts from a specific category\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/categories\",\n      \"description\": \"Get all blog categories\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/api/categories/:id\",\n      \"description\": \"Get a single category with its recent posts\"\n    },\n    {\n      \"method\": \"GET\",\n      \"path\": \"/health\",\n      \"description\": \"Health check endpoint\"\n    }\n  ]\n}");
const data = (0, parser2_1.parseGeneratedCodeFlexible)('I\'ll create a focused course selling website with essential sections. Here\'s the code:\n\n```tsx\n<file>src/pages/HomePage.tsx</file>\n<code>\nimport React from "react";\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { BookOpen, Check, Star, Users } from "lucide-react";\n\nconst HomePage = () => {\n  return (\n    <div className="min-h-screen bg-white">\n      {/* Navigation */}\n      <header className="border-b">\n        <div className="container mx-auto px-4 py-4 flex items-center justify-between">\n          <div className="flex items-center space-x-2">\n            <BookOpen className="h-6 w-6 text-blue-600" />\n            <span className="text-xl font-bold">EduMaster</span>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className="hidden md:flex items-center space-x-8">\n            <a href="#" className="text-gray-700 hover:text-blue-600 transition-colors">Courses</a>\n            <a href="#" className="text-gray-700 hover:text-blue-600 transition-colors">About</a>\n            <a href="#" className="text-gray-700 hover:text-blue-600 transition-colors">Pricing</a>\n            <a href="#" className="text-gray-700 hover:text-blue-600 transition-colors">Contact</a>\n          </nav>\n          \n          {/* Mobile Menu Button */}\n          <button className="md:hidden">\n            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />\n            </svg>\n          </button>\n          \n          {/* CTA Buttons */}\n          <div className="hidden md:flex items-center space-x-4">\n            <Button variant="outline">Log in</Button>\n            <Button>Sign up</Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className="py-20 bg-gradient-to-r from-blue-50 to-indigo-50">\n        <div className="container mx-auto px-4 flex flex-col md:flex-row items-center">\n          <div className="md:w-1/2 mb-10 md:mb-0">\n            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">Advance Your Career With Expert-Led Courses</h1>\n            <p className="text-xl text-gray-600 mb-8">Gain in-demand skills from industry professionals. Join thousands of successful learners today.</p>\n            <div className="flex flex-col sm:flex-row gap-4">\n              <Button size="lg" className="bg-blue-600 hover:bg-blue-700">\n                Browse Courses\n              </Button>\n              <Button size="lg" variant="outline">\n                View Free Resources\n              </Button>\n            </div>\n          </div>\n          <div className="md:w-1/2 md:pl-10">\n            <img \n              src="https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80" \n              alt="Students learning" \n              className="rounded-lg shadow-xl"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Courses */}\n      <section className="py-16 bg-white">\n        <div className="container mx-auto px-4">\n          <div className="text-center mb-12">\n            <h2 className="text-3xl font-bold mb-4">Our Most Popular Courses</h2>\n            <p className="text-gray-600 max-w-2xl mx-auto">Discover our highest-rated and most enrolled courses across various categories.</p>\n          </div>\n          \n          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">\n            {[\n              {\n                title: "Complete Web Development Bootcamp",\n                category: "Development",\n                rating: 4.9,\n                students: 12540,\n                price: 89.99,\n                image: "https://images.unsplash.com/photo-1498050108023-c5249f4df085?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=872&q=80"\n              },\n              {\n                title: "Data Science Fundamentals",\n                category: "Data Science",\n                rating: 4.8,\n                students: 8320,\n                price: 79.99,\n                image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"\n              },\n              {\n                title: "Digital Marketing Masterclass",\n                category: "Marketing",\n                rating: 4.7,\n                students: 7450,\n                price: 69.99,\n                image: "https://images.unsplash.com/photo-1557838923-2985c318be48?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"\n              }\n            ].map((course, index) => (\n              <div key={index} className="bg-white rounded-lg border shadow-sm hover:shadow-md transition-shadow">\n                <img src={course.image} alt={course.title} className="w-full h-48 object-cover rounded-t-lg" />\n                <div className="p-5">\n                  <div className="text-sm text-blue-600 font-medium mb-2">{course.category}</div>\n                  <h3 className="text-xl font-bold mb-3">{course.title}</h3>\n                  <div className="flex items-center mb-4">\n                    <div className="flex items-center mr-4">\n                      <Star className="h-5 w-5 text-yellow-500 fill-yellow-500" />\n                      <span className="ml-1 text-gray-700">{course.rating}</span>\n                    </div>\n                    <div className="flex items-center">\n                      <Users className="h-5 w-5 text-gray-500" />\n                      <span className="ml-1 text-gray-700">{course.students.toLocaleString()} students</span>\n                    </div>\n                  </div>\n                  <div className="flex justify-between items-center">\n                    <span className="text-2xl font-bold">${course.price}</span>\n                    <Button>Enroll Now</Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className="text-center mt-12">\n            <Button variant="outline" size="lg">\n              View All Courses\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className="py-16 bg-gray-50">\n        <div className="container mx-auto px-4">\n          <div className="text-center mb-12">\n            <h2 className="text-3xl font-bold mb-4">What Our Students Say</h2>\n            <p className="text-gray-600 max-w-2xl mx-auto">Hear from our community of learners who have transformed their careers with our courses.</p>\n          </div>\n          \n          <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">\n            {[\n              {\n                name: "Sarah Johnson",\n                role: "Frontend Developer",\n                image: "https://randomuser.me/api/portraits/women/40.jpg",\n                text: "The web development course was exactly what I needed to transition from design to development. Within 3 months of completing it, I landed my dream job!"\n              },\n              {\n                name: "Michael Chen",\n                role: "Data Analyst",\n                image: "https://randomuser.me/api/portraits/men/32.jpg",\n                text: "I had tried learning data science on my own without much success. This structured curriculum and the support from instructors made all the difference."\n              }\n            ].map((testimonial, index) => (\n              <div key={index} className="bg-white p-6 rounded-lg shadow-sm">\n                <div className="flex items-start mb-4">\n                  <img src={testimonial.image} alt={testimonial.name} className="w-12 h-12 rounded-full mr-4" />\n                  <div>\n                    <h4 className="font-bold">{testimonial.name}</h4>\n                    <p className="text-gray-600 text-sm">{testimonial.role}</p>\n                  </div>\n                </div>\n                <p className="text-gray-700">{testimonial.text}</p>\n                <div className="mt-4 flex">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className="h-5 w-5 text-yellow-500 fill-yellow-500" />\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter */}\n      <section className="py-16 bg-blue-600 text-white">\n        <div className="container mx-auto px-4 text-center">\n          <h2 className="text-3xl font-bold mb-4">Get Free Learning Resources</h2>\n          <p className="max-w-2xl mx-auto mb-8">Subscribe to our newsletter to receive weekly tips, free tutorials, and exclusive course discounts.</p>\n          \n          <div className="flex flex-col sm:flex-row gap-2 max-w-lg mx-auto">\n            <Input \n              type="email" \n              placeholder="Enter your email" \n              className="bg-white text-gray-800"\n            />\n            <Button className="bg-white text-blue-600 hover:bg-gray-100">\n              Subscribe\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className="bg-gray-900 text-gray-300 py-12">\n        <div className="container mx-auto px-4">\n          <div className="grid md:grid-cols-4 gap-8">\n            <div>\n              <div className="flex items-center space-x-2 mb-4">\n                <BookOpen className="h-6 w-6 text-blue-400" />\n                <span className="text-xl font-bold text-white">EduMaster</span>\n              </div>\n              <p className="mb-4">Transforming lives through quality online education since 2018.</p>\n              <div className="flex space-x-4">\n                <a href="#" className="hover:text-white transition-colors">\n                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">\n                    <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />\n                  </svg>\n                </a>\n                <a href="#" className="hover:text-white transition-colors">\n                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">\n                    <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />\n                  </svg>\n                </a>\n                <a href="#" className="hover:text-white transition-colors">\n                  <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">\n                    <path fillRule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clipRule="evenodd" />\n                  </svg>\n                </a>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className="text-white text-lg font-semibold mb-4">Courses</h3>\n              <ul className="space-y-2">\n                <li><a href="#" className="hover:text-white transition-colors">Web Development</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Data Science</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Digital Marketing</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Business</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Design</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className="text-white text-lg font-semibold mb-4">Company</h3>\n              <ul className="space-y-2">\n                <li><a href="#" className="hover:text-white transition-colors">About Us</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Careers</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Blog</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Partners</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Contact Us</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className="text-white text-lg font-semibold mb-4">Support</h3>\n              <ul className="space-y-2">\n                <li><a href="#" className="hover:text-white transition-colors">Help Center</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Terms of Service</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">Privacy Policy</a></li>\n                <li><a href="#" className="hover:text-white transition-colors">FAQs</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className="border-t border-gray-800 mt-12 pt-8 text-center text-sm">\n            <p>© 2023 EduMaster. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default HomePage;\n</code>\n\n<file>src/App.tsx</file>\n<code>\nimport React from \'react\';\nimport { BrowserRouter as Router, Route, Routes } from \'react-router-dom\';\nimport HomePage from \'./pages/HomePage\';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path="/" element={<HomePage />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n</code>\n\nThis course selling website features:\n\n1. **Navigation**: Clean header with logo, navigation links, and login/signup buttons\n2. **Hero Section**: Compelling headline about advancing your career with expert-led courses\n3. **Featured Courses**: Grid of popular courses with key details like ratings, student count, and pricing\n4. **Testimonials**: Social proof from successful students\n5. **Newsletter**: Email subscription for free learning resources\n6. **Footer**: Comprehensive site map and company information\n\nThe design uses a professional blue color scheme with clean, modern UI elements. All content is fully responsive for mobile and desktop viewing.');
const data2 = (0, stParser_1.parseFrontendCode)('```json\n{\n  "codeFiles": {\n    "src/types/index.ts": "export interface Todo {\\n  id: string;\\n  title: string;\\n  description?: string;\\n  completed: boolean;\\n  priority: \'low\' | \'medium\' | \'high\';\\n  dueDate?: string;\\n  createdAt: string;\\n  updatedAt: string;\\n}\\n\\nexport interface TodoFormData {\\n  title: string;\\n  description?: string;\\n  priority: \'low\' | \'medium\' | \'high\';\\n  dueDate?: string;\\n}\\n\\nexport interface TodoFilters {\\n  status: \'all\' | \'active\' | \'completed\';\\n  priority: \'all\' | \'low\' | \'medium\' | \'high\';\\n  sortBy: \'createdAt\' | \'dueDate\' | \'priority\';\\n}",\n    "src/pages/TodoApp.tsx": "import { useState, useEffect } from \'react\';\\nimport { useTodos } from \'@/hooks/useTodos\';\\nimport { TodoHeader } from \'@/components/TodoHeader\';\\nimport { TodoForm } from \'@/components/TodoForm\';\\nimport { TodoList } from \'@/components/TodoList\';\\nimport { TodoFilters } from \'@/components/TodoFilters\';\\nimport { TodoStats } from \'@/components/TodoStats\';\\nimport { Card } from \'@/components/ui/card\';\\nimport { Button } from \'@/components/ui/button\';\\nimport { Plus } from \'lucide-react\';\\nimport type { TodoFormData, TodoFilters as TodoFiltersType } from \'@/types\';\\n\\nexport function TodoApp() {\\n  const [showForm, setShowForm] = useState(false);\\n  const [filters, setFilters] = useState<TodoFiltersType>({\\n    status: \'all\',\\n    priority: \'all\',\\n    sortBy: \'createdAt\'\\n  });\\n\\n  const {\\n    todos,\\n    loading,\\n    error,\\n    addTodo,\\n    updateTodo,\\n    deleteTodo,\\n    toggleTodo,\\n    fetchTodos\\n  } = useTodos();\\n\\n  useEffect(() => {\\n    fetchTodos();\\n  }, []);\\n\\n  const handleAddTodo = async (todoData: TodoFormData) => {\\n    await addTodo(todoData);\\n    setShowForm(false);\\n  };\\n\\n  const filteredTodos = todos.filter(todo => {\\n    if (filters.status === \'active\' && todo.completed) return false;\\n    if (filters.status === \'completed\' && !todo.completed) return false;\\n    if (filters.priority !== \'all\' && todo.priority !== filters.priority) return false;\\n    return true;\\n  }).sort((a, b) => {\\n    if (filters.sortBy === \'priority\') {\\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\\n    }\\n    if (filters.sortBy === \'dueDate\') {\\n      if (!a.dueDate && !b.dueDate) return 0;\\n      if (!a.dueDate) return 1;\\n      if (!b.dueDate) return -1;\\n      return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\\n    }\\n    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\\n  });\\n\\n  if (loading && todos.length === 0) {\\n    return (\\n      <div className=\\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center\\">\\n        <div className=\\"text-center\\">\\n          <div className=\\"animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600 mx-auto\\"></div>\\n          <p className=\\"mt-4 text-lg text-gray-600\\">Loading your todos...</p>\\n        </div>\\n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div className=\\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\\">\\n      <div className=\\"container mx-auto px-4 py-8\\">\\n        <TodoHeader />\\n        \\n        <div className=\\"max-w-4xl mx-auto space-y-6\\">\\n          <TodoStats todos={todos} />\\n          \\n          <Card className=\\"p-6 shadow-lg border-0 bg-white/70 backdrop-blur-sm\\">\\n            <div className=\\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6\\">\\n              <h2 className=\\"text-2xl font-bold text-gray-800\\">My Tasks</h2>\\n              <Button\\n                onClick={() => setShowForm(!showForm)}\\n                className=\\"bg-indigo-600 hover:bg-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\\"\\n              >\\n                <Plus className=\\"w-4 h-4 mr-2\\" />\\n                Add New Task\\n              </Button>\\n            </div>\\n\\n            {showForm && (\\n              <div className=\\"mb-6 p-4 bg-gray-50 rounded-lg border\\">\\n                <TodoForm\\n                  onSubmit={handleAddTodo}\\n                  onCancel={() => setShowForm(false)}\\n                  loading={loading}\\n                />\\n              </div>\\n            )}\\n\\n            <TodoFilters filters={filters} onFiltersChange={setFilters} />\\n            \\n            {error && (\\n              <div className=\\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4\\">\\n                {error}\\n              </div>\\n            )}\\n\\n            <TodoList\\n              todos={filteredTodos}\\n              onToggle={toggleTodo}\\n              onUpdate={updateTodo}\\n              onDelete={deleteTodo}\\n              loading={loading}\\n            />\\n          </Card>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}",\n    "src/components/TodoHeader.tsx": "import { CheckSquare, Sparkles } from \'lucide-react\';\\n\\nexport function TodoHeader() {\\n  return (\\n    <div className=\\"text-center mb-8\\">\\n      <div className=\\"flex items-center justify-center gap-3 mb-4\\">\\n        <div className=\\"p-3 bg-indigo-600 rounded-full shadow-lg\\">\\n          <CheckSquare className=\\"w-8 h-8 text-white\\" />\\n        </div>\\n        <h1 className=\\"text-4xl md:text-5xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\\">\\n          TodoMaster\\n        </h1>\\n        <Sparkles className=\\"w-6 h-6 text-indigo-500 animate-pulse\\" />\\n      </div>\\n      <p className=\\"text-lg text-gray-600 max-w-2xl mx-auto\\">\\n        Organize your life with our beautiful and intuitive todo application. \\n        Stay productive and never miss a task again.\\n      </p>\\n    </div>\\n  );\\n}",\n    "src/components/TodoForm.tsx": "import { useState } from \'react\';\\nimport { Button } from \'@/components/ui/button\';\\nimport { Input } from \'@/components/ui/input\';\\nimport { Textarea } from \'@/components/ui/textarea\';\\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\\nimport { Calendar, Plus, X } from \'lucide-react\';\\nimport type { TodoFormData } from \'@/types\';\\n\\ninterface TodoFormProps {\\n  onSubmit: (data: TodoFormData) => void;\\n  onCancel: () => void;\\n  loading?: boolean;\\n  initialData?: Partial<TodoFormData>;\\n}\\n\\nexport function TodoForm({ onSubmit, onCancel, loading = false, initialData }: TodoFormProps) {\\n  const [formData, setFormData] = useState<TodoFormData>({\\n    title: initialData?.title || \'\',\\n    description: initialData?.description || \'\',\\n    priority: initialData?.priority || \'medium\',\\n    dueDate: initialData?.dueDate || \'\'\\n  });\\n\\n  const handleSubmit = (e: React.FormEvent) => {\\n    e.preventDefault();\\n    if (!formData.title.trim()) return;\\n    \\n    onSubmit({\\n      ...formData,\\n      title: formData.title.trim(),\\n      description: formData.description?.trim() || undefined,\\n      dueDate: formData.dueDate || undefined\\n    });\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"space-y-4\\">\\n      <div>\\n        <Input\\n          placeholder=\\"What needs to be done?\\"\\n          value={formData.title}\\n          onChange={(e) => setFormData({ ...formData, title: e.target.value })}\\n          className=\\"text-lg border-gray-300 focus:border-indigo-500 focus:ring-indigo-500\\"\\n          required\\n        />\\n      </div>\\n\\n      <div>\\n        <Textarea\\n          placeholder=\\"Add a description (optional)\\"\\n          value={formData.description}\\n          onChange={(e) => setFormData({ ...formData, description: e.target.value })}\\n          className=\\"resize-none border-gray-300 focus:border-indigo-500 focus:ring-indigo-500\\"\\n          rows={3}\\n        />\\n      </div>\\n\\n      <div className=\\"grid grid-cols-1 sm:grid-cols-2 gap-4\\">\\n        <div>\\n          <Select value={formData.priority} onValueChange={(value: \'low\' | \'medium\' | \'high\') => setFormData({ ...formData, priority: value })}>\\n            <SelectTrigger className=\\"border-gray-300 focus:border-indigo-500\\">\\n              <SelectValue placeholder=\\"Priority\\" />\\n            </SelectTrigger>\\n            <SelectContent>\\n              <SelectItem value=\\"low\\">🟢 Low Priority</SelectItem>\\n              <SelectItem value=\\"medium\\">🟡 Medium Priority</SelectItem>\\n              <SelectItem value=\\"high\\">🔴 High Priority</SelectItem>\\n            </SelectContent>\\n          </Select>\\n        </div>\\n\\n        <div className=\\"relative\\">\\n          <Input\\n            type=\\"date\\"\\n            value={formData.dueDate}\\n            onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\\n            className=\\"border-gray-300 focus:border-indigo-500 focus:ring-indigo-500\\"\\n          />\\n          <Calendar className=\\"absolute right-3 top-3 w-4 h-4 text-gray-400 pointer-events-none\\" />\\n        </div>\\n      </div>\\n\\n      <div className=\\"flex gap-3 pt-2\\">\\n        <Button\\n          type=\\"submit\\"\\n          disabled={loading || !formData.title.trim()}\\n          className=\\"flex-1 bg-indigo-600 hover:bg-indigo-700 text-white shadow-md hover:shadow-lg transition-all duration-200\\"\\n        >\\n          <Plus className=\\"w-4 h-4 mr-2\\" />\\n          {loading ? \'Adding...\' : initialData ? \'Update Task\' : \'Add Task\'}\\n        </Button>\\n        <Button\\n          type=\\"button\\"\\n          variant=\\"outline\\"\\n          onClick={onCancel}\\n          className=\\"border-gray-300 hover:bg-gray-50\\"\\n        >\\n          <X className=\\"w-4 h-4 mr-2\\" />\\n          Cancel\\n        </Button>\\n      </div>\\n    </form>\\n  );\\n}",\n    "src/components/TodoList.tsx": "import { TodoItem } from \'./TodoItem\';\\nimport { Empty } from \'lucide-react\';\\nimport type { Todo } from \'@/types\';\\n\\ninterface TodoListProps {\\n  todos: Todo[];\\n  onToggle: (id: string) => void;\\n  onUpdate: (id: string, data: Partial<Todo>) => void;\\n  onDelete: (id: string) => void;\\n  loading?: boolean;\\n}\\n\\nexport function TodoList({ todos, onToggle, onUpdate, onDelete, loading }: TodoListProps) {\\n  if (todos.length === 0) {\\n    return (\\n      <div className=\\"text-center py-12\\">\\n        <div className=\\"w-24 h-24 mx-auto mb-4 text-gray-300\\">\\n          <Empty className=\\"w-full h-full\\" />\\n        </div>\\n        <h3 className=\\"text-xl font-semibold text-gray-500 mb-2\\">No tasks found</h3>\\n        <p className=\\"text-gray-400\\">Add your first task to get started!</p>\\n      </div>\\n    );\\n  }\\n\\n  return (\\n    <div className=\\"space-y-3\\">\\n      {todos.map((todo) => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          onToggle={onToggle}\\n          onUpdate={onUpdate}\\n          onDelete={onDelete}\\n          loading={loading}\\n        />\\n      ))}\\n    </div>\\n  );\\n}",\n    "src/components/TodoItem.tsx": "import { useState } from \'react\';\\nimport { Button } from \'@/components/ui/button\';\\nimport { Checkbox } from \'@/components/ui/checkbox\';\\nimport { Card } from \'@/components/ui/card\';\\nimport { Badge } from \'@/components/ui/badge\';\\nimport { TodoForm } from \'./TodoForm\';\\nimport { Edit2, Trash2, Calendar, Clock } from \'lucide-react\';\\nimport type { Todo, TodoFormData } from \'@/types\';\\n\\ninterface TodoItemProps {\\n  todo: Todo;\\n  onToggle: (id: string) => void;\\n  onUpdate: (id: string, data: Partial<Todo>) => void;\\n  onDelete: (id: string) => void;\\n  loading?: boolean;\\n}\\n\\nexport function TodoItem({ todo, onToggle, onUpdate, onDelete, loading }: TodoItemProps) {\\n  const [isEditing, setIsEditing] = useState(false);\\n\\n  const handleUpdate = (formData: TodoFormData) => {\\n    onUpdate(todo.id, {\\n      title: formData.title,\\n      description: formData.description,\\n      priority: formData.priority,\\n      dueDate: formData.dueDate,\\n      updatedAt: new Date().toISOString()\\n    });\\n    setIsEditing(false);\\n  };\\n\\n  const getPriorityColor = (priority: string) => {\\n    switch (priority) {\\n      case \'high\': return \'bg-red-100 text-red-800 border-red-200\';\\n      case \'medium\': return \'bg-yellow-100 text-yellow-800 border-yellow-200\';\\n      case \'low\': return \'bg-green-100 text-green-800 border-green-200\';\\n      default: return \'bg-gray-100 text-gray-800 border-gray-200\';\\n    }\\n  };\\n\\n  const isOverdue = todo.dueDate && new Date(todo.dueDate) < new Date() && !todo.completed;\\n\\n  if (isEditing) {\\n    return (\\n      <Card className=\\"p-4 border border-indigo-200 bg-indigo-50/50\\">\\n        <TodoForm\\n          onSubmit={handleUpdate}\\n          onCancel={() => setIsEditing(false)}\\n          loading={loading}\\n          initialData={{\\n            title: todo.title,\\n            description: todo.description,\\n            priority: todo.priority,\\n            dueDate: todo.dueDate\\n          }}\\n        />\\n      </Card>\\n    );\\n  }\\n\\n  return (\\n    <Card className={`p-4 transition-all duration-200 hover:shadow-md ${\\n      todo.completed ? \'bg-gray-50 border-gray-200\' : \'bg-white border-gray-200 hover:border-indigo-300\'\\n    } ${isOverdue ? \'border-red-300 bg-red-50\' : \'\'}`}>\\n      <div className=\\"flex items-start gap-3\\">\\n        <div className=\\"pt-1\\">\\n          <Checkbox\\n            checked={todo.completed}\\n            onCheckedChange={() => onToggle(todo.id)}\\n            className=\\"w-5 h-5\\"\\n          />\\n        </div>\\n        \\n        <div className=\\"flex-1 min-w-0\\">\\n          <div className=\\"flex items-start justify-between gap-3\\">\\n            <div className=\\"flex-1\\">\\n              <h3 className={`font-medium text-lg ${\\n                todo.completed ? \'line-through text-gray-500\' : \'text-gray-900\'\\n              }`}>\\n                {todo.title}\\n              </h3>\\n              \\n              {todo.description && (\\n                <p className={`mt-1 text-sm ${\\n                  todo.completed ? \'text-gray-400\' : \'text-gray-600\'\\n                }`}>\\n                  {todo.description}\\n                </p>\\n              )}\\n              \\n              <div className=\\"flex items-center gap-3 mt-3 flex-wrap\\">\\n                <Badge className={getPriorityColor(todo.priority)}>\\n                  {todo.priority} priority\\n                </Badge>\\n                \\n                {todo.dueDate && (\\n                  <div className={`flex items-center gap-1 text-sm ${\\n                    isOverdue ? \'text-red-600\' : todo.completed ? \'text-gray-400\' : \'text-gray-600\'\\n                  }`}>\\n                    <Calendar className=\\"w-4 h-4\\" />\\n                    {new Date(todo.dueDate).toLocaleDateString()}\\n                    {isOverdue && <span className=\\"ml-1 font-medium\\">(Overdue)</span>}\\n                  </div>\\n                )}\\n                \\n                <div className=\\"flex items-center gap-1 text-xs text-gray-400\\">\\n                  <Clock className=\\"w-3 h-3\\" />\\n                  {new Date(todo.createdAt).toLocaleDateString()}\\n                </div>\\n              </div>\\n            </div>\\n            \\n            <div className=\\"flex items-center gap-2 flex-shrink-0\\">\\n              <Button\\n                variant=\\"ghost\\"\\n                size=\\"sm\\"\\n                onClick={() => setIsEditing(true)}\\n                disabled={loading}\\n                className=\\"text-gray-500 hover:text-indigo-600 hover:bg-indigo-50\\"\\n              >\\n                <Edit2 className=\\"w-4 h-4\\" />\\n              </Button>\\n              <Button\\n                variant=\\"ghost\\"\\n                size=\\"sm\\"\\n                onClick={() => onDelete(todo.id)}\\n                disabled={loading}\\n                className=\\"text-gray-500 hover:text-red-600 hover:bg-red-50\\"\\n              >\\n                <Trash2 className=\\"w-4 h-4\\" />\\n              </Button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </Card>\\n  );\\n}",\n    "src/components/TodoFilters.tsx": "import { Button } from \'@/components/ui/button\';\\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \'@/components/ui/select\';\\nimport { Filter, SortAsc } from \'lucide-react\';\\nimport type { TodoFilters as TodoFiltersType } from \'@/types\';\\n\\ninterface TodoFiltersProps {\\n  filters: TodoFiltersType;\\n  onFiltersChange: (filters: TodoFiltersType) => void;\\n}\\n\\nexport function TodoFilters({ filters, onFiltersChange }: TodoFiltersProps) {\\n  const statusOptions = [\\n    { value: \'all\', label: \'All Tasks\' },\\n    { value: \'active\', label: \'Active\' },\\n    { value: \'completed\', label: \'Completed\' }\\n  ];\\n\\n  const priorityOptions = [\\n    { value: \'all\', label: \'All Priorities\' },\\n    { value: \'high\', label: \'High Priority\' },\\n    { value: \'medium\', label: \'Medium Priority\' },\\n    { value: \'low\', label: \'Low Priority\' }\\n  ];\\n\\n  const sortOptions = [\\n    { value: \'createdAt\', label: \'Created Date\' },\\n    { value: \'dueDate\', label: \'Due Date\' },\\n    { value: \'priority\', label: \'Priority\' }\\n  ];\\n\\n  return (\\n    <div className=\\"flex flex-col sm:flex-row gap-4 mb-6 p-4 bg-gray-50 rounded-lg border\\">\\n      <div className=\\"flex items-center gap-2 text-sm font-medium text-gray-700\\">\\n        <Filter className=\\"w-4 h-4\\" />\\n        <span>Filters:</span>\\n      </div>\\n      \\n      <div className=\\"flex flex-col sm:flex-row gap-3 flex-1\\">\\n        <div className=\\"flex-1\\">\\n          <Select \\n            value={filters.status} \\n            onValueChange={(value: \'all\' | \'active\' | \'completed\') => \\n              onFiltersChange({ ...filters, status: value })\\n            }\\n          >\\n            <SelectTrigger className=\\"w-full border-gray-300\\">\\n              <SelectValue />\\n            </SelectTrigger>\\n            <SelectContent>\\n              {statusOptions.map(option => (\\n                <SelectItem key={option.value} value={option.value}>\\n                  {option.label}\\n                </SelectItem>\\n              ))}\\n            </SelectContent>\\n          </Select>\\n        </div>\\n\\n        <div className=\\"flex-1\\">\\n          <Select \\n            value={filters.priority} \\n            onValueChange={(value: \'all\' | \'low\' | \'medium\' | \'high\') => \\n              onFiltersChange({ ...filters, priority: value })\\n            }\\n          >\\n            <SelectTrigger className=\\"w-full border-gray-300\\">\\n              <SelectValue />\\n            </SelectTrigger>\\n            <SelectContent>\\n              {priorityOptions.map(option => (\\n                <SelectItem key={option.value} value={option.value}>\\n                  {option.label}\\n                </SelectItem>\\n              ))}\\n            </SelectContent>\\n          </Select>\\n        </div>\\n\\n        <div className=\\"flex-1\\">\\n          <Select \\n            value={filters.sortBy} \\n            onValueChange={(value: \'createdAt\' | \'dueDate\' | \'priority\') => \\n              onFiltersChange({ ...filters, sortBy: value })\\n            }\\n          >\\n            <SelectTrigger className=\\"w-full border-gray-300\\">\\n              <div className=\\"flex items-center gap-2\\">\\n                <SortAsc className=\\"w-4 h-4\\" />\\n                <SelectValue />\\n              </div>\\n            </SelectTrigger>\\n            <SelectContent>\\n              {sortOptions.map(option => (\\n                <SelectItem key={option.value} value={option.value}>\\n                  Sort by {option.label}\\n                </SelectItem>\\n              ))}\\n            </SelectContent>\\n          </Select>\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}",\n    "src/components/TodoStats.tsx": "import { Card } from \'@/components/ui/card\';\\nimport { CheckCircle, Circle, AlertCircle, Calendar } from \'lucide-react\';\\nimport type { Todo } from \'@/types\';\\n\\ninterface TodoStatsProps {\\n  todos: Todo[];\\n}\\n\\nexport function TodoStats({ todos }: TodoStatsProps) {\\n  const totalTodos = todos.length;\\n  const completedTodos = todos.filter(todo => todo.completed).length;\\n  const activeTodos = totalTodos - completedTodos;\\n  const overdueTodos = todos.filter(todo => \\n    todo.dueDate && \\n    new Date(todo.dueDate) < new Date() && \\n    !todo.completed\\n  ).length;\\n  \\n  const completionRate = totalTodos > 0 ? Math.round((completedTodos / totalTodos) * 100) : 0;\\n\\n  const stats = [\\n    {\\n      label: \'Total Tasks\',\\n      value: totalTodos,\\n      icon: Circle,\\n      color: \'text-gray-600\',\\n      bgColor: \'bg-gray-100\'\\n    },\\n    {\\n      label: \'Active Tasks\',\\n      value: activeTodos,\\n      icon: Circle,\\n      color: \'text-blue-600\',\\n      bgColor: \'bg-blue-100\'\\n    },\\n    {\\n      label: \'Completed\',\\n      value: completedTodos,\\n      icon: CheckCircle,\\n      color: \'text-green-600\',\\n      bgColor: \'bg-green-100\'\\n    },\\n    {\\n      label: \'Overdue\',\\n      value: overdueTodos,\\n      icon: AlertCircle,\\n      color: \'text-red-600\',\\n      bgColor: \'bg-red-100\'\\n    }\\n  ];\\n\\n  return (\\n    <div className=\\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\\">\\n      {stats.map((stat, index) => {\\n        const Icon = stat.icon;\\n        return (\\n          <Card key={index} className=\\"p-4 bg-white/70 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-shadow duration-200\\">\\n            <div className=\\"flex items-center justify-between\\">\\n              <div>\\n                <p className=\\"text-sm font-medium text-gray-600\\">{stat.label}</p>\\n                <p className=\\"text-2xl font-bold text-gray-900\\">{stat.value}</p>\\n              </div>\\n              <div className={`p-2 rounded-full ${stat.bgColor}`}>\\n                <Icon className={`w-5 h-5 ${stat.color}`} />\\n              </div>\\n            </div>\\n          </Card>\\n        );\\n      })}\\n      \\n      {totalTodos > 0 && (\\n        <Card className=\\"col-span-2 md:col-span-4 p-4 bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg\\">\\n          <div className=\\"flex items-center justify-between\\">\\n            <div>\\n              <p className=\\"text-sm font-medium text-indigo-100\\">Completion Rate</p>\\n              <p className=\\"text-3xl font-bold\\">{completionRate}%</p>\\n            </div>\\n            <div className=\\"flex items-center gap-2\\">\\n              <Calendar className=\\"w-6 h-6 text-indigo-200\\" />\\n              <div className=\\"w-16 h-2 bg-indigo-400 rounded-full overflow-hidden\\">\\n                <div \\n                  className=\\"h-full bg-white rounded-full transition-all duration-500\\"\\n                  style={{ width: `${completionRate}%` }}\\n                />\\n              </div>\\n            </div>\\n          </div>\\n        </Card>\\n      )}\\n    </div>\\n  );\\n}",\n    "src/hooks/useTodos.ts": "import { useState, useCallback } from \'react\';\\nimport axios from \'axios\';\\nimport type { Todo, TodoFormData } from \'@/types\';\\n\\nexport function useTodos() {\\n  const [todos, setTodos] = useState<Todo[]>([]);\\n  const [loading, setLoading] = useState(false);\\n  const [error, setError] = useState<string | null>(null);\\n\\n  const fetchTodos = useCallback(async () => {\\n    setLoading(true);\\n    setError(null);\\n    try {\\n      // Simulated API call - replace with real endpoint\\n      const response = await axios.get(\'/api/todos\');\\n      if (response.data.success) {\\n        setTodos(response.data.data || []);\\n      }\\n    } catch (err) {\\n      // For demo purposes, using mock data when API is not available\\n      console.log(\'API not available, using mock data\');\\n      const mockTodos: Todo[] = [\\n        {\\n          id: \'1\',\\n          title: \'Complete project proposal\',\\n          description: \'Finish writing the Q4 project proposal for the new client\',\\n          completed: false,\\n          priority: \'high\',\\n          dueDate: \'2024-12-25\',\\n          createdAt: \'2024-12-20T10:00:00Z\',\\n          updatedAt: \'2024-12-20T10:00:00Z\'\\n        },\\n        {\\n          id: \'2\',\\n          title: \'Review team reports\',\\n          description: \'Go through all team member reports and provide feedback\',\\n          completed: true,\\n          priority: \'medium\',\\n          dueDate: \'2024-12-22\',\\n          createdAt: \'2024-12-19T14:30:00Z\',\\n          updatedAt: \'2024-12-20T09:15:00Z\'\\n        },\\n        {\\n          id: \'3\',\\n          title: \'Plan holiday party\',\\n          description: \'Organize the annual company holiday celebration\',\\n          completed: false,\\n          priority: \'low\',\\n          dueDate: \'2024-12-30\',\\n          createdAt: \'2024-12-18T16:45:00Z\',\\n          updatedAt: \'2024-12-18T16:45:00Z\'\\n        }\\n      ];\\n      setTodos(mockTodos);\\n    } finally {\\n      setLoading(false);\\n    }\\n  }, []);\\n\\n  const addTodo = useCallback(async (todoData: TodoFormData) => {\\n    setLoading(true);\\n    setError(null);\\n    try {\\n      const newTodo: Todo = {\\n        id: Date.now().toString(),\\n        ...todoData,\\n        completed: false,\\n        createdAt: new Date().toISOString(),\\n        updatedAt: new Date().toISOString()\\n      };\\n\\n      // Simulated API call\\n      const response = await axios.post(\'/api/todos\', newTodo);\\n      if (response.data.success) {\\n        setTodos(prev => [newTodo, ...prev]);\\n      }\\n    } catch (err) {\\n      // For demo, add to local state when API is not available\\n      const newTodo: Todo = {\\n        id: Date.now().toString(),\\n        ...todoData,\\n        completed: false,\\n        createdAt: new Date().toISOString(),\\n        updatedAt: new Date().toISOString()\\n      };\\n      setTodos(prev => [newTodo, ...prev]);\\n    } finally {\\n      setLoading(false);\\n    }\\n  }, []);\\n\\n  const updateTodo = useCallback(async (id: string, updates: Partial<Todo>) => {\\n    setLoading(true);\\n    setError(null);\\n    try {\\n      const response = await axios.put(`/api/todos/${id}`, updates);\\n      if (response.data.success) {\\n        setTodos(prev => prev.map(todo => \\n          todo.id === id ? { ...todo, ...updates } : todo\\n        ));\\n      }\\n    } catch (err) {\\n      // For demo, update local state\\n      setTodos(prev => prev.map(todo => \\n        todo.id === id ? { ...todo, ...updates } : todo\\n      ));\\n    } finally {\\n      setLoading(false);\\n    }\\n  }, []);\\n\\n  const deleteTodo = useCallback(async (id: string) => {\\n    setLoading(true);\\n    setError(null);\\n    try {\\n      const response = await axios.delete(`/api/todos/${id}`);\\n      if (response.data.success) {\\n        setTodos(prev => prev.filter(todo => todo.id !== id));\\n      }\\n    } catch (err) {\\n      // For demo, remove from local state\\n      setTodos(prev => prev.filter(todo => todo.id !== id));\\n    } finally {\\n      setLoading(false);\\n    }\\n  }, []);\\n\\n  const toggleTodo = useCallback(async (id: string) => {\\n    const todo = todos.find(t => t.id === id);\\n    if (todo) {\\n      await updateTodo(id, { \\n        completed: !todo.completed,\\n        updatedAt: new Date().toISOString()\\n      });\\n    }\\n  }, [todos, updateTodo]);\\n\\n  return {\\n    todos,\\n    loading,\\n    error,\\n    fetchTodos,\\n    addTodo,\\n    updateTodo,\\n    deleteTodo,\\n    toggleTodo\\n  };\\n}",\n    "src/App.tsx": "import { BrowserRouter as Router, Routes, Route } from \'react-router-dom\';\\nimport { TodoApp } from \'./pages/TodoApp\';\\n\\nfunction App() {\\n  return (\\n    <Router>\\n      <Routes>\\n        <Route path=\\"/\\" element={<TodoApp />} />\\n      </Routes>\\n    </Router>\\n  );\\n}\\n\\nexport default App;"\n  },\n  "structureTree": {\n    "src/types/index.ts": {\n      "path": "src/types/index.ts",\n      "imports": [],\n      "exports": ["Todo", "TodoFormData", "TodoFilters"],\n      "description": "TypeScript interfaces for Todo data structures, form data, and filter options"\n    },\n    "src/pages/TodoApp.tsx": {\n      "path": "src/pages/TodoApp.tsx",\n      "imports": ["useTodos", "TodoHeader", "TodoForm", "TodoList", "TodoFilters", "TodoStats", "shadcn/ui components"],\n      "exports": ["TodoApp"],\n      "description": "Main todo application page component that orchestrates all todo functionality"\n    },\n    "src/components/TodoHeader.tsx": {\n      "path": "src/components/TodoHeader.tsx",\n      "imports": ["lucide-react icons"],\n      "exports": ["TodoHeader"],\n      "description": "Header component with app title, logo, and description"\n    },\n    "src/components/TodoForm.tsx": {\n      "path": "src/components/TodoForm.tsx",\n      "imports": ["shadcn/ui components", "lucide-react icons", "TodoFormData type"],\n      "exports": ["TodoForm"],\n      "description": "Form component for adding and editing todos with validation"\n    },\n    "src/components/TodoList.tsx": {\n      "path": "src/components/TodoList.tsx",\n      "imports": ["TodoItem", "lucide-react icons", "Todo type"],\n      "exports": ["TodoList"],\n      "description": "Container component that renders a list of todo items with empty state"\n    },\n    "src/components/TodoItem.tsx": {\n      "path": "src/components/TodoItem.tsx",\n      "imports": ["shadcn/ui components", "TodoForm", "lucide-react icons", "Todo types"],\n      "exports": ["TodoItem"],\n      "description": "Individual todo item component with toggle, edit, delete functionality and priority badges"\n    },\n    "src/components/TodoFilters.tsx": {\n      "path": "src/components/TodoFilters.tsx",\n      "imports": ["shadcn/ui components", "lucide-react icons", "TodoFilters type"],\n      "exports": ["TodoFilters"],\n      "description": "Filter and sort controls for todos by status, priority, and date"\n    },\n    "src/components/TodoStats.tsx": {\n      "path": "src/components/TodoStats.tsx",\n      "imports": ["shadcn/ui components", "lucide-react icons", "Todo type"],\n      "exports": ["TodoStats"],\n      "description": "Statistics dashboard showing todo counts, completion rate, and progress"\n    },\n    "src/hooks/useTodos.ts": {\n      "path": "src/hooks/useTodos.ts",\n      "imports": ["axios", "Todo and TodoFormData types"],\n      "exports": ["useTodos"],\n      "description": "Custom hook for todo CRUD operations with mock data fallback when API unavailable"\n    },\n    "src/App.tsx": {\n      "path": "src/App.tsx",\n      "imports": ["react-router-dom", "TodoApp"],\n      "exports": ["App"],\n      "description": "Root application component with routing setup"\n    },\n    "src/components/ui/": {\n      "path": "src/components/ui/",\n      "description": "Shadcn/ui components (button, input, card, checkbox, badge, select, textarea) - already available"\n    }\n  }\n}\n```');
console.log(data2);
